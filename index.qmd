---
title: 251 Midterm Exam
author: Adam Osborne
date: '2024-03-07'
execute:
  error: false
categories:
- Exam
- Week07
---

In this exam, you'll be using data collected about US polling places. The [Center for Public Integrity](https://publicintegrity.org/) assembled this data using open records requests and contact with state or county election officials. Full documentation is available on the [github repository for the data](https://github.com/PublicI/us-polling-places) - each state's details can be found in a README file for that state; there is also a machine-readable `manifest.yaml` file for each state provided.

We will start out by using data assembled by the TidyTuesday project, but will eventually get to the raw data as well.

The raw CSV data is available at https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv

```{r r-setup}
# load any R packages you use in this chunk
library(dplyr)
library(stringr)
library(ggplot2)
```

```{python py-setup}
# load any python packages you use in this chunk
import pandas as pd
import matplotlib.pyplot as plt
```

# Data Input - Polling Places
(30 pts)

## Data File Inspection

Here are the first six lines of the TidyTuesday CSV file:

```         
election_date,state,county_name,jurisdiction,jurisdiction_type,precinct_id,precinct_name,polling_place_id,location_type,name,address,notes,source,source_date,source_notes
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,AUTAUGAVILLE VOL FIRE DEPT,NA,election_day,AUTAUGAVILLE VOL FIRE DEPT,"2610 HIGHWAY 14 W, AUTAUGAVILLE, AL 36003",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BILLINGSLEY COMMUNITY CENTER,NA,election_day,BILLINGSLEY COMMUNITY CENTER,"2159 COUNTY RD 37, BILLINGSLEY, AL 36006",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BOONE'S CHAPEL,NA,election_day,BOONE'S CHAPEL,"2301 COUNTY RD 66, PRATTVILLE, AL 36067",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,BOOTH VOL FIRE DEPT,NA,election_day,BOOTH VOL FIRE DEPT,"1701 COUNTY ROAD 10, BOOTH, AL 36008",NA,ORR,2020-10-21,NA
2020-11-03,AL,AUTAUGA,AUTAUGA,county,NA,CAMELLIA BAPTIST CH,NA,election_day,CAMELLIA BAPTIST CH,"201 WOODVALE ROAD, PRATTVILLE, AL 36067",NA,ORR,2020-10-21,NA
```

1.  What is the file delimiter? (1 pt)    
A comma ,

2.  What is the header? (1 pt)    
the names of all the columns: election_date,state,county_name,jurisdiction,jurisdiction_type,precinct_id,precinct_name,polling_place_id,location_type,name,address,notes,source,source_date,source_notes

3.  How many columns will the data have when it is read in using R or Python? (1 pt)    
15

4.  How is the data stored differently in the address field compared to the name field (1 pt), and why is this different handling necessary (1 pt)?    
The name usually doesn't have commas, but address field sometimes does contain commas.(which is the delimiter of this file)So, you need to put quotations around the address to make sure when you try reading the address data it doesn't split up the address into multiple components and mess everything up. Without commas, the name column doesnt need the quotations. 

## Reading the Data

Read in the data in R (5 pts) and in python (5 pts).

Make sure to load any packages which are necessary to run your code in the setup chunks at the beginning of the document.

```{r r-read-data}
data <- read.csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv")
```

```{python py-read-data}
data = pd.read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv", low_memory=False)
```

## Summarize the Data

Using any method you choose from either language, fill in the following table.

Language used: python and r

Make sure your terms match the language you're using and the code you provided above. If you use code to get these values (which is probably a good idea), please use the code chunks provided here:

```{r r-data-summary-code}
summary(data)

```

```{python py-data-summary-code}
data.info()

data.dtypes

data.nunique(axis=0)
```


When computing the number of unique values, exclude missing values.

| Column Name       | Data Type (5 pts) | # missing values (5 pts) | # unique values (5 pts) |
|-------------|----------|-------------------------|-------------------------|
| election_date     |Character  | 0                         | 7                              |
| state             |Character  | 0                         | 39                             |
| county_name       |Character  | 114578                    | 1880                           |
| jurisdiction      |Character  | 103609                    | 9206                           |
| jurisdiction_type |Character  | 60                        | 7                              |
| precinct_id       |Character  | 148844                    | 50287                          |
| precinct_name     |Character  | 96870                     | 110887                         |
| polling_place_id  |Character  | 408188                    | 11145                          |
| location_type     |Character  | 192840                    | 6                              |
| name              |Character  | 75                        | 105985                         |
| address           |Character  | 3006                      | 151319                         |
| notes             |Character  | 416322                    | 9614                           |
| source            |Character  | 0                         | 4                              |
| source_date       |Character  | 0                         | 36                             |
| source_notes      |Character  | 425363                    | 4                              |

: Summary of Polling Data

# Data Cleaning - Polling Places over Time
(50 pts)

For this part of the exam, you'll use your student ID to get the state you'll be working with. 
```{r student-id-state-assign}
my_nuid <- 63083618 # Change this value to your NUID
state_ids <- readRDS("state-ids.RDS")
my_state <- state_ids$state[my_nuid%%37]
print(my_state)
```

Your end goal is to get a plot of the number of available polling places in each election, with separate lines for each jurisdiction (e.g. county) within your state. 

## Steps
(10 pts)

Write out the steps (in plain language) required to get from the polling place data provided [here](https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-01-16/polling_places.csv) to the data you need to create your plot.
Make sure to remove polling places which do not make sense - e.g. those with an address consisting of just the state name, or those named "DO NOT USE". 

For each step, identify the data manipulation verb you will use, and any variables you will pass in as arguments. 
Fill in the following table when you are finished. 
Add new rows by moving to a new line, and separate each cell in the table with ` | ` (spaces matter). `|` is on the key above the enter key and shares a key with `\` (backslash). You will need to hold shift down.

Step # | Verb | Arguments

 1 | filter   | data$state
 
 2 | filter   | NJ_data$name
 
 3 | filter   | NJ_data$name
 
 4 | gsub     | NJ_data$precinct_name
 
 5 | group_by | NJ_data$county_name
 
 6 | count    | NJ_data$election_date

## Code 
(10 pts)
Write code in R or python to execute the steps you outlined above.

```{r}
NJ_data <-data %>% filter(state== 'NJ')

NJ_data <- NJ_data %>% filter(name != 'New Jersey')

NJ_data <- NJ_data %>% filter(name != "DO NOT USE")

NJ_data$county_name <- gsub("\\-.*",'', NJ_data$precinct_name) 


#create data for chart
chart_data <- NJ_data %>% group_by(county_name) %>% count(election_date)


```
## Chart Description
(7 pts)

Use the grammar of graphics to identify the components of the chart here, which provides the data for Wisconsin.
![Wisconsin counties where the number of polling places changed, 2012-2020](wisconsin-example.jpg){width="50%"}

- geom: line
- aesthetics: (list at least 3)

  - title
  - y label
  - x label
- coordinate system: cartesian
- y axis scale: exponential
- x axis scale: linear


## Chart
(20 pts)

Write code in R or python to create a chart like that shown at the beginning of this example (5 pts). 
Make sure your axes are labeled (5 pts) and your chart has a title (5 pts).
Include your plot in this document and make sure you have a figure caption that describes what someone should notice in the chart (5 pts)
You may do this either by modifying the chunk options or by using `include=F` and manually including the picture with a caption.

```{r}

#chart
ggplot(chart_data, aes(x=election_date, y=n, group = county_name ))+
  geom_line()+
  theme_bw()+
  scale_y_continuous(trans='log2')+     
  ggtitle("No. of Polling Places in New Jersey Counties by Election.") +
  xlab("Election Date")+
  ylab("No. of Polling Places per County") 

```

## Modifications

Evaluate the chart you created for comprehensibility and accessibility. (1 pt)

My chart is not very comprehensible. NJ has something like 5000-6000 precincts, in which visually distinguishing between each would be very challenging. The scale of the graph makes it slightly more readable, but the sheer number of counties represented on the graph makes it hard to understand. 

What modifications might you add to this chart to make it clearer and more understandable? (2 pts)

The first thing that comes to mind is to highlight specific precincts with color so we can see some individual patterns. A legend describing each color would be added as well to determine which color is which line. I would also consider making the criteria I am graphing be more strict, to show less lines on one graph. (such as northern counties in NJ, counties surrounding NYC, or rural counties.)


# Data Processing
(20 pts)

You want to mail a letter to every polling place in the state you were assigned. In order to do this, you need to separate out the pieces of the address: building number, street, city, state, and zip code. 
Note that not all addresses will have all of these components - in Alaska, for example, there are often not street numbers or even names. 

## Function Steps
(5 pts)

Use the following addresses to think through the steps you will need to accomplish this task.

```
Tatitlek, AK 99677
First Street, Cordova, AK 99574
105 ICE ST, MENASHA, WI 54952-3223
1025 W 5TH AVE, OSHKOSH, WI 54902
1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067
5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005
713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265
COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919
```

Write out the steps your function will need to accomplish in plain language.


## Function Code - Single Address
(5 pts)

Write a function, `address_parser`, which can handle a single address and return a data structure containing each piece of the address, with NAs for pieces which are not matched.

(change this chunk to python if you'd prefer to use python over R for this task)
```{python single-address-parser}
def address_parser(address):
  building_number = None
  street = None
  city = None
  state = None
  zip_code = None
  
  address_split = address.split(',')


  #Zip code and State
  if len(address_split[-1])==9:
      zip_and_state = address_split[-1].split(' ')
      zip_code = zip_and_state[2]
      state = zip_and_state[1]
      address_split.pop()

  elif len(address_split[-1])==14:
      zip_and_state = address_split[-1].split(' ')
      zip_code = zip_and_state[2]
      state = zip_and_state[1]
      address_split.pop()
  
  #city
  city = address_split[-1]
  address_split.pop()

  
  #building number/street address
  for i in address_split:
    
    #checking for a building number
    if i.isalpha() == False:
      street_address = i.split(' ')
      #finds the building number in the street address.
      for j in street_address:
        if j.isdigit()==True:
          building_number = j
          
          #removes building number from street address
          street_address.remove(j)
          #sets street to rest of street address
          street= ' '.join(street_address)

          break
        
      #sets street address when there is no apparent building number.
      street = ' '.join(street_address)

  
    

  
  return pd.Series({
      'Building Number': building_number,
      'Street': street,
      'City': city,
      'State': state,
      'Zip Code': zip_code
})

    

```


This chunk will test your function on the addresses provided as examples. 
(change this chunk to python if you used python above)
```{python single-address-parser-test, error = T}
address_parser("Tatitlek, AK 99677")
address_parser("First Street, Cordova, AK 99574")
address_parser("105 ICE ST, MENASHA, WI 54952-3223")
address_parser("1025 W 5TH AVE, OSHKOSH, WI 54902")
address_parser("1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067")
address_parser("5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005")
address_parser("713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265")
address_parser("COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919")
```

## Function Code - Vector
(5 pts)

Write a function, `address_vec`, which can parse a vector of addresses and return a data frame with columns corresponding to each piece of the address.

(change this chunk to python if you'd prefer to use python over R for this task)
```{python vector-address-parser}
def address_vec(vectorized_addresses):
  address_frame = pd.DataFrame(columns =['Building Number', 'Street', 'City', 'State', 'Zip Code'])
    
  for address in vectorized_addresses:
    building_number = None
    street = None
    city = None
    state = None
    zip_code = None
  
    address_split = address.split(',')
    


    #Zip code and State
    if len(address_split[-1])==9:
        zip_and_state = address_split[-1].split(' ')
        zip_code = zip_and_state[2]
        state = zip_and_state[1]
        address_split.pop()

    elif len(address_split[-1])==14:
        zip_and_state = address_split[-1].split(' ')
        zip_code = zip_and_state[2]
        state = zip_and_state[1]
        address_split.pop()
  
    #city
    city = address_split[-1]
    address_split.pop()

  
    #building number/street address
    for i in address_split:
      
      #checking for a building number
      if i.isalpha() == False:
        street_address = i.split(' ')
        #finds the building number in the street address.
        for j in street_address:
          if j.isdigit()==True:
            building_number = j
            
            #removes building number from street address
            street_address.remove(j)
            #sets street to rest of street address
            street= ' '.join(street_address)

            break
        
        #sets street address when there is no apparent building number.
        street = ' '.join(street_address)
    
    
    
    
    
    address_series = pd.Series({
            'Building Number': building_number,
            'Street': street,
            'City': city,
            'State': state,
            'Zip Code': zip_code
            })
    address_frame = address_frame._append(address_series, ignore_index = True)
  return address_frame

  

```


This chunk will test your function on the addresses provided as examples. Delete whichever chunk corresponds to the language you didn't use. 
```{r r-vector-address-parser-test, error = T}
test_vec <- c("Tatitlek, AK 99677", "First Street, Cordova, AK 99574", "105 ICE ST, MENASHA, WI 54952-3223", "1025 W 5TH AVE, OSHKOSH, WI 54902", "1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067", "5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005", "713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265", "COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919")
address_vec(test_vec)
```

```{python py-vector-address-parser-test, error = T}
test_vec = ["Tatitlek, AK 99677", "First Street, Cordova, AK 99574", "105 ICE ST, MENASHA, WI 54952-3223", "1025 W 5TH AVE, OSHKOSH, WI 54902", "1702 COUNTY ROAD 40 W, PRATTVILLE, AL 36067", "5281 HIGHWAY 29, CORINTH VFD (PEROTE STATION), BANKS, AL 36005", "713 W. MOUNTAIN AVENUE, JACKSONVILLE, AL 36265", "COMMUNITY CENTER, 1168 HWY 84, SILAS, AL 36919"]
address_vec(test_vec)
```

## Function Evaluation

Use your function to parse a vector of the unique polling place addresses in your state, creating a data table of address components for your letters.
(5 pts)

```{python r-function-eval}
NJ_data = data[data['state']=='NJ']
NJ_addresses = NJ_data['address'].values.tolist()
address_vec(NJ_addresses)

```

Where did your function have issues, if it did? (5 pts)

My function relies entirely on commas separating different elements of the address. Alaska had nice and relatively consistent comma use so I could use that to my benefit when making the parsing function, but when used on states without commas (NJ, and many others) it's completely useless. For a state like NJ where a space separates every value I could change the function to initially separate by each space and parse from there. I made my function to primarily be flexible with the amount of information in the address, like Alaska where there might be missing information, and to be able to work around it getting the rest of it correct. 
